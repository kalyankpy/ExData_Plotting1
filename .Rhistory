cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(a)
a$set(matrix(5:8,2))
cacheSolve(a)
cacheSolve(a)
a$getinv
data
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(matrix(1:4,2))
debug()
traceback()
cacheSolve(matrix(1:4,2))
traceback()
n
cacheSolve(a)
a$getinv
a$getinv()
b=a$getinv()
a$get() %*% b
# This script in this file is intended to create two functions which collectively perform the following functions:
# creation of a matrix,
# creates inverse of a matrix,
# assigns new matrix to the matrix variable
# check if the inverse of a matrix is created previously or not.
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y=matrix()){
x <<-y
inv <<- NULL
}
get <- function() x
setinv <- function(minv) inv <<- minv
getinv <- function() inv
list(set=set,
get=get,
setinv=setinv,
getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
# This script in this file is intended to create two functions which collectively perform the following functions:
# creation of a matrix,
# creates inverse of a matrix,
# assigns new matrix to the matrix variable
# check if the inverse of a matrix is created previously or not.
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y=matrix()){
x <<-y
inv <<- NULL
}
get <- function() x
setinv <- function(minv) inv <<- minv
getinv <- function() inv
list(set=set,
get=get,
setinv=setinv,
getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
makeCacheMatrix(matrix(1:4,2))
a<-makeCacheMatrix(matrix(1:4,2))
get()
get(a)
a$get()
a$set()
a$getinv()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getinv
a$getinv()
b=a$getinv()
a$get()
a$get() %*% b
q()
load("/media/kalyan_hd/redcross_new/methylkit_analysis/meth_objs/p8_yng_vs_aged_meth_f.rda")
p8_yng_vs_aged_meth_f
p8_yng_vs_aged_meth_f@coverage.index
p8_yng_vs_aged_meth_f@coverage.index>100
p8_yng_vs_aged_meth_f[p8_yng_vs_aged_meth_f@coverage.index,]
p8_yng_vs_aged_meth_f[p8_yng_vs_aged_meth_f@coverage.index]
p8_yng_vs_aged_meth_f[c(p8_yng_vs_aged_meth_f@coverage.index)]
p8_yng_vs_aged_meth_f$coverage1>100
p8_yng_vs_aged_meth_f[p8_yng_vs_aged_meth_f$coverage1>5 & p8_yng_vs_aged_meth_f$coverage2>5 & p8_yng_vs_aged_meth_f$coverage3>5 & p8_yng_vs_aged_meth_f$coverage4>5]
p8_yng_vs_aged_meth_f$coverage1>5 & p8_yng_vs_aged_meth_f$coverage2>5 & p8_yng_vs_aged_meth_f$coverage3>5 & p8_yng_vs_aged_meth_f$coverage4>5
head(p8_yng_vs_aged_meth_f$coverage1>5 & p8_yng_vs_aged_meth_f$coverage2>5 & p8_yng_vs_aged_meth_f$coverage3>5 & p8_yng_vs_aged_meth_f$coverage4>5)
p8_yng_vs_aged_meth_f
library(Biostrings)
library(BSgenome.Mmusculus.UCSC.mm10)
library(plyr)
library(ggplot2)
detach("package:plyr", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:plyr", unload=TRUE)
library(Biostrings)
library(BSgenome.Mmusculus.UCSC.mm10)
library(ggplot2)
library(reshape2)
i=1
m<-matchPattern("CCGG", Mmusculus[[i]])
m
m@ranges
m@elementType
m@elementMetadata
m@metadata
m_gr<-GRanges(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand=*)
m_gr<-GRanges(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand="*")
m_gr
rm(m_gr)
m_gr$i<-GRanges(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand="*")
m_gr=GRanges()
m_gr$i<-GRanges(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand="*")
m_gr<-GRanges(seqnames(Mmusculus)[i]=(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand="*"))
m_gr<-(seqnames(Mmusculus)[i]=GRanges(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand="*"))
m_gr<-(seqnames(Mmusculus)[i]=GRangesList(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand="*"))
m_gr<-GRangesList(seqnames(Mmusculus)[i]=(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand="*"))
m_gr<-GRangesList(seqnames(Mmusculus)[i]<-(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand="*"))
m_gr<-GRanges(seqnames=seqnames(Mmusculus)[i], ranges=m@ranges,strand="*")
m_gr
gaps(m_gr)
m
starts<-start(gaps(m))
ends<-end(gaps(m))
temp_df<-data.frame(start=starts-4,end=ends,chr=seqnames(Mmusculus)[i]) #actually end = ends
temp_df
head(temp_df)
gaps(m_gr)
?flank
flank(gaps(m_gr),3)
### Load the needed libraries
# Biostrings is needed for pattern identification
# BSgenome.Mmusculus.UCSC.mm10 is the mouse genome
# plyr and reshape2 are needed for manipulating the data format
# scales needed for log2 transformation
library(Biostrings)
library(BSgenome.Mmusculus.UCSC.mm10)
library(plyr)
library(ggplot2)
library(reshape2)
library(scales)
# Identify the MspI recongnition sites for each chromosomal entry
# Generate a dataframe with the length of MspI digested fragments
mdf=data.frame();
for (i in seq_along(Mmusculus)){
#print(paste("Processing ",seqnames(Mmusculus)[i], sep=""))
m<-matchPattern("CCGG", Mmusculus[[i]])
starts<-start(gaps(m))
ends<-end(gaps(m))
temp_df<-data.frame(start=starts-4,end=ends,chr=seqnames(Mmusculus)[i]) #actually end = ends
temp_df$start<-replace(temp_df$start, temp_df$start == -3, 0)
temp_df<-temp_df[c("chr","start","end")]
mdf<-rbind(mdf,temp_df)
}
mdf$width=mdf$end-mdf$start
ml<-mdf[mdf$width>39&mdf$width<601,]
counts<-ddply(ml,.(width), nrow)
# Create a plot of the frequency of the fragment lengths (y-axis is logarithmic)
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p+scale_y_continuous(trans=log2_trans())+xlab("Length of the MspI digested fragment")+ylab("Frequency")
p<-p+scale_y_continuous(trans=log2_trans())+xlab("Length of the MspI digested fragment (40-600bp)")+ylab("Frequency (log2)")
p<-p+coord_cartesian(xlim=40,ylim=601)
p+scale_y_continuous(breaks=seq(0, 20000, 1000))+scale_x_continuous(breaks=seq(0, 601, 50))
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p<-p+scale_y_continuous(trans=log2_trans())+xlab("Length of the MspI digested fragment (40-600bp)")+ylab("Frequency (log2)")
p<-p+coord_cartesian(xlim=40,ylim=601)
p+scale_y_continuous(breaks=seq(0, 20000, 1000))+scale_x_continuous(breaks=seq(0, 601, 50))
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p<-p+scale_y_continuous(trans=log2_trans(), breaks=seq(0,17000,1000))+xlab("Length of the MspI digested fragment (40-600bp)")+ylab("Frequency (log2)")
p<-p+coord_cartesian(xlim=40,ylim=601)
p+scale_x_continuous(breaks=seq(0, 601, 50))
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p<-p+scale_y_continuous(trans=log2_trans(), breaks=seq(0,17000,1000))+xlab("Length of the MspI digested fragment (40-600bp)")+ylab("Frequency (log2)")
p<-p+coord_cartesian(xlim=40,ylim=601)
p+scale_x_continuous(breaks=seq(0, 601, 50))
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p<-p+scale_y_continuous(trans=log2_trans())+xlab("Length of the MspI digested fragment (40-600bp)")+ylab("Frequency (log2)")
p<-p+coord_cartesian(xlim=40,ylim=601)
p+scale_x_continuous(breaks=seq(0, 601, 50))
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p<-p+scale_y_continuous(trans=log2_trans())+xlab("Length of the MspI digested fragment (40-600bp)")+ylab("Frequency (log2)")
p<-p+coord_cartesian(xlim=40,ylim=601)
p
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p<-p+scale_y_continuous(trans=log2_trans())+xlab("Length of the MspI digested fragment")+ylab("Frequency")
p<-p+coord_cartesian(xlim=40,ylim=601)
p
mdf$width=mdf$end-mdf$start
ml<-mdf[mdf$width>39&mdf$width<601,]
counts<-ddply(ml,.(width), nrow)
# Create a plot of the frequency of the fragment lengths (y-axis is logarithmic)
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p<-p+scale_y_continuous(trans=log2_trans())+xlab("Length of the MspI digested fragment")+ylab("Frequency")
p<-p+coord_cartesian(xlim=40,ylim=601)
head(counts)
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p<-p+scale_y_continuous(trans=log2_trans())
p<-p+coord_cartesian(xlim=40,ylim=601)
p
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()
p+scale_y_continuous(trans=log2_trans())
p+xlab("Length of MspI digested fragments")
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()+xlab("Length of MspI digested fragments")
p<-p+scale_y_continuous(trans=log2_trans())
p
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()+xlab("Length of MspI digested fragments (40-600bp)")+ylab("Frequency(log2)")
p<-p+scale_y_continuous(trans=log2_trans())
p
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()+xlab("Length of MspI digested fragments (40-600bp)")+ylab("Frequency (log2)")
p<-p+scale_y_continuous(trans=log2_trans())+scale_x_continuous(breaks=0,600,50)
p
p<-p+scale_y_continuous(trans=log2_trans())+scale_x_continuous(breaks=seq(0,600,50))
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()+xlab("Length of MspI digested fragments (40-600bp)")+ylab("Frequency (log2)")
p<-p+scale_y_continuous(trans=log2_trans())+scale_x_continuous(breaks=seq(0,600,50))
p
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()+xlab("Length of MspI digested fragments (40-600bp)")+ylab("Frequency (log2)")
p<-p+scale_y_continuous(trans=log2_trans(), breaks=seq(0,17000,1000))+scale_x_continuous(breaks=seq(0,600,50))
p
p<-ggplot(counts,aes(x=width, y=V1))+geom_line()+xlab("Length of MspI digested fragments (40-600bp)")+ylab("Frequency (log2)")
p<-p+scale_y_continuous(trans=log2_trans())+scale_x_continuous(breaks=seq(0,600,50))
p
library(GenomicFeatures)
?makeTranscriptDbFromUCSC
supportedUCSCtables()
refseqdb<-makeTranscriptDbFromUCSC(genome="hg19",tablename="refGene")
refseqdb
?makeTranscriptDbFromBiomart
library(BioMart)
library(bioMart)
library(biomaRt)
listMarts()
listMarts()
listDatasets(useMart("ensembl"))
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
bioClite("AnnotationHub")
biocLite("AnnotationHub")
?makeTranscriptDbFromBiomart
setwd("/home/kalyankpy/Dropbox/coursera/")
data<-read.table("household_power_consumption.txt", header=T)
head(data)
?read.table
data<-read.delim("household_power_consumption.txt", header=T, sep=";", nrows=5)
head(data)
strptime?
{}
?strptime
class(data$Time)
strptime(data$Time)
strptime(data$Time, "%d%m%y")
strptime(as.character(data$Time), "%d%m%y")
as.character(data$Time)
strptime(as.character(data$Time), "%H:%M:%S")
strptime(as.character(c(data$Date,data$Time), "%d/%m/%y %H:%M:%S")
)
strptime(as.character(paste(data$Date,data$Time), "%d/%m/%y %H:%M:%S"))
strptime(as.character(paste(data$Date,data$Time)), "%d/%m/%y %H:%M:%S")
paste(data$Date, data$Time)
strptime(paste(data$Date, data$Time), "%d/%m/%y %H:%M:%S"
)
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
times <- c("23:03:20", "22:29:56", "01:03:30", "18:21:03", "16:56:26")
x <- paste(dates, times)
x
strptime(x, "%d/%m/%y %H:%M:%S")
strptime(x, "%m/%d/%y %H:%M:%S")
strptime(paste(data$Date, data$Time), "%m/%d/%y %H:%M:%S")
strptime(paste(data$Date, data$Time), "%m/%d/%Y %H:%M:%S")
strptime(data$Date, "%d/%m/%Y")
strptime(data$Time, "%H:%M:%S")
head(data)
?read.table
data<-read.delim("household_power_consumption.txt", header=T, sep=";")
data$Date<-strptime(data$Date, "%d/%m/%Y")
class(data$Date)
?as.Date
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
as.Date(dates, "%m/%d/%y")
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
dates<-as.Date(dates, "%m/%d/%y")
class(dates)
data$Date<-as.Date(data$Date, "%d/%m/%Y")
data$Time<-strptime(data$Time, "%H:%M:%S")
class(data$Time)
class(data$Date)
head(data)
?strptime
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
times <- c("23:03:20", "22:29:56", "01:03:30", "18:21:03", "16:56:26")
x <- paste(dates, times)
strptime(x, "%m/%d/%y %H:%M:%S")
head(strptime(data$Time, "%H:%M:%S"))
strptime(head(data$Time), "%H:%M:%S")
head(data$Time)
d<-read.delim("household_power_consumption.txt", header=T, sep=";", nrows=5)
head(d$Time)
strptime(d$Time, "%H:%M:%S")
strptime(paste(d$Date,d$Time), "%d/%m/%Y %H:%M:%S")
strptime(paste(d$Date,d$Time), "%H:%M:%S")
strptime(paste(d$Time), "%H:%M:%S")
strptime(paste(d$Date,d$Time), "%H:%M:%S")
data$Time<-strptime(paste(d$Date,d$Time), "%d/%m/%Y %H:%M:%S")
data<-read.delim("household_power_consumption.txt", header=T, sep=";")
data$Date<-as.Date(data$Date, "%d/%m/%Y")
data$Time<-strptime(paste(d$Date,d$Time), "%d/%m/%Y %H:%M:%S")
dim(data)
dim(data$Date)
length(data$Date)
length(data$Time)
data$Time<-strptime(paste(data$Date,data$Time), "%d/%m/%Y %H:%M:%S")
?as.Date
methdos(class(data$Date))
methods(class(data$Date))
showMethods(class(data$Date))
showMethods(class(data$Date))
slotsFromS3(data$Date)
methods(data$Date)
head(data$Date)
data$Date==as.Date("2007-02-01") | data$Date==as.Date("2007-02-02")
nro<-data$Date==as.Date("2007-02-01") | data$Date==as.Date("2007-02-02")
data[nro,]
req_rows<-data$Date==as.Date("2007-02-01") | data$Date==as.Date("2007-02-02")
req_data<-data[req_rows,]
head(data)
data$Time<-strptime(paste(data$Date,data$Time), "%d/%m/%Y %H:%M:%S")
head(data$Time)
strptime(paste(d$Date,d$Time), "%d/%m/%Y %H:%M:%S")
strptime(paste(head(data$Date),head(data$Time)), "%d/%m/%Y %H:%M:%S")
class(d$Date)
class(d$Time)
class(data$Time)
class(data$Date)
data<-read.delim("household_power_consumption.txt", header=T, sep=";")
class(data$Date)
strptime(paste(head(data$Date),head(data$Time)), "%d/%m/%Y %H:%M:%S")
data$Time<-strptime(paste(data$Date,data$Time), "%d/%m/%Y %H:%M:%S")
data$Date<-as.Date(data$Date, "%d/%m/%Y")
head(data)
req_rows<-data$Date==as.Date("2007-02-01") | data$Date==as.Date("2007-02-02")
req_data<-data[req_rows,]
dim(req_data)
hist(req_data$Global_active_power)
class(data$Global_active_power)
?read.table
read.delim("household_power_consumption.txt", header=T, sep=";", colClasses=c("Date","character","numeric","numeric", "numeric", "numeric","numeric","numeric","numeric"), nrows=5)
data<-read.delim("household_power_consumption.txt", header=T, sep=";", colClasses=c("Date","character","numeric","numeric", "numeric", "numeric","numeric","numeric","numeric"))
data<-read.delim("household_power_consumption.txt", header=T, sep=";", colClasses=c("Date","character","numeric","character", "character", "character","numeric","numeric","numeric"))
data<-read.delim("household_power_consumption.txt", header=T, sep=";")
?gsub
data$Time<-strptime(paste(data$Date,data$Time), "%d/%m/%Y %H:%M:%S")
data$Date<-as.Date(data$Date, "%d/%m/%Y")
req_rows<-data$Date==as.Date("2007-02-01") | data$Date==as.Date("2007-02-02")
req_data<-data[req_rows,]
dim(req_data)
gsub("?", "NA", req_data$Global_active_power)
req_data$Global_active_power
gsub("\?", "NA", req_data$Global_active_power)
gsub("?", "NA", req_data$Global_active_power, fixed=T)
is.na(req_data$Date)
req_data[!is.na(req_data$Date)]
req_data[!is.na(req_data$Date),]
req_data$Global_active_power[!is.na(req_data$Global_active_power)]
req_data$Global_active_power[is.na(req_data$Global_active_power)]
hist(req_data$Global_active_power)
hist(as.numeric(req_data$Global_active_power))
title("Global Active Power")
hist("Global Active Power"=as.numeric(req_data$Global_active_power))
xlab("Global")
?hist
hist(as.numeric(req_data$Global_active_power), main="Global Active Power", xlab="Global Active Power (kilowatts")
as.numeric(req_data$Global_active_power)
as.numeric(head(req_data$Global_active_power))
head(req_data$Global_active_power)
as.integer(head(req_data$Global_active_power))
as.numeric(as.character((head(req_data$Global_active_power))
)
)
hist(as.numeric(as.character(req_data$Global_active_power)), main="Global Active Power", xlab="Global Active Power (kilowatts")
?hist()
hist(as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
?png
setwd("/home/kalyankpy/Dropbox/coursera/")
setwd("/home/kalyankpy/Dropbox/coursera/ExData_Plotting1/")
png("plot1.png", 480,480)
hist(as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
dev.off()
?plot
plot(x=req_data$Date,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
type="l")
plot(x=req_data$Date,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)"
)
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)",
)
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)",
type="l")
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)", xlab=""
type="l")
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)", xlab=NULL
type="l")
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)", xlab=NULL,
type="l")
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)", xlab="",
type="l")
# This script reads the coursera dataset for programming assignment 1 and creates plot as needed
setwd("/home/kalyankpy/Dropbox/coursera/ExData_Plotting1/")
# Read the complete dataset
data<-read.delim("household_power_consumption.txt", header=T, sep=";")
# Convert the time and data into respective classes
data$Time<-strptime(paste(data$Date,data$Time), "%d/%m/%Y %H:%M:%S")
data$Date<-as.Date(data$Date, "%d/%m/%Y")
# Extract the data for two days
req_rows<-data$Date==as.Date("2007-02-01") | data$Date==as.Date("2007-02-02")
data<-read.delim("../household_power_consumption.txt", header=T, sep=";")
req_data<-data[req_rows,]
# Initiate the png device and save the plot, close the device
png("plot2.png", 480,480)
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)", xlab="",
type="l")
dev.off()
?png
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power", pointsize=5
ylab="Global Active Power (kilowatts)", xlab="",
type="l")
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power", pointsize=5,
ylab="Global Active Power (kilowatts)", xlab="",
type="l")
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power", pointsize=20,
ylab="Global Active Power (kilowatts)", xlab="",
type="l")
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power", pointsize=12,
ylab="Global Active Power (kilowatts)", xlab="",
type="l")
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)", xlab="",
type="l")
plot(x=req_data$Time,y=as.numeric(as.character(req_data$Global_active_power)),
main="Global Active Power",
ylab="Global Active Power (kilowatts)", xlab="",
type="l")
